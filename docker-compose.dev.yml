services:
  ollama:
    image: ollama/ollama
    container_name: mcphost-ollama
    ports:
      - "11434:11434"
    volumes:
      - ./ollama_models:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
  open-webui:
    image: ghcr.io/open-webui/open-webui:cuda
    container_name: open-webui
    ports:
      - "3011:8080"
    volumes:
      - ./data/open-webui:/app/backend/data
    restart: always
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]
    environment:
      - WEBUI_USERNAME=admin@example.com # ✅ 自訂帳號
      - WEBUI_PASSWORD=0961220102 # ✅ 自訂密碼
      - OLLAMA_BASE_URL=http://ollama:11434
    runtime: nvidia
    extra_hosts:
      - host.docker.internal:host-gateway

  mcpclient:
    build:
      context: .
      dockerfile: ./services/mcpclient/Dockerfile.mcpclient
    container_name: mcpclient
    environment:
      - OLLAMA_API_URL=http://ollama:11434
      - MCP_CLIENT_CONFIG=...
    volumes:
      - ./mcpclient:/app
    ports:
      - "8011:8000"

  noteserver:
    build:
      context: .
      dockerfile: ./services/noteservice/Dockerfile.noteserver
    container_name: note
    volumes:
      - ./note:/app

    ports:
      - "8022:8000"
    env_file:
      - ./.env # <- 指定要讀的環境變數檔
    # depends_on:
    #   - note-qdrant

  note-qdrant:
    image: qdrant/qdrant
    container_name: note-qdrant
    ports:
      - "6333:6333" # http://localhost:6333/dashboard
    volumes:
      - ./data/qdrant_data:/qdrant/storage
  note-db:
    image: postgres:15
    container_name: note-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: note
    ports:
      - "5411:5432"
    volumes:
      - ./data/note_db:/var/lib/postgresql/data
      - ./db/init-scripts:/docker-entrypoint-initdb.d:ro
  note-sotorage:
    image: minio/minio
    container_name: note-minio
    command: server /data --console-address ":9001"
    ports:
      - "9111:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: note
      MINIO_ROOT_PASSWORD: note123note123
    volumes:
      - ./data/note-storage:/data

  redis:
    image: redis:7
    container_name: note-worker-redis
    ports:
      - "6379:6379"
  worker:
    build:
      context: .
      dockerfile: ./services/celeryworker/Dockerfile.worker
    container_name: note-worker
    command: celery -A celery_app.celery_app worker --concurrency=4 -Q notes -n worker.import_md@%h --loglevel=info

    depends_on:
      - noteserver
      - redis
      - note-db
      - note-qdrant
    volumes:
      - ./note:/app
    env_file:
      - ./.env # <- 指定要讀的環境變數檔

  flower:
    image: mher/flower:0.9.7
    container_name: worker-flower
    command: flower --broker=redis://redis:6379/0 --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
  # imageserver:
  #   build:
  #     context: .
  #     dockerfile: ./services/imageservice/Dockerfile.imageserver
  #   container_name: imageservice
  #   volumes:
  #     - ./image:/app
  #   #   - ./services/imageservice/models:/models # 可放置離線模型檔案 , https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt

  #   # environment:
  #   #   - VECTOR_DB_URL=http://qdrant:6333
  #   #   - SECURITY_SERVICE_URL=http://securityserver:9000
  #   ports:
  #     - "8033:8000"
  #   # depends_on:
  #   #   - qdrant
  #   #   - securityserver

  # speechserver:
  #   build:
  #     context: .
  #     dockerfile: ./services/speechservice/Dockerfile.speechserver
  #   container_name: speechservice
  #   volumes:
  #     - ./speech:/app
  #   # environment:
  #   # - VECTOR_DB_URL=http://qdrant:6333
  #   # - SECURITY_SERVICE_URL=http://securityserver:9000

  #   ports:
  #     - "8044:8000"
  #   depends_on:
  #     - qdrant
  #     # - securityserver
